# -*- coding: utf-8 -*-
"""SuperAGI_trial1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ScRPLSXTmKbC035K7g3kP0f-x91MCWAD
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import math

class MultiHeadAttention(nn.Module):
    def __init__(self, embed_dim, num_heads):
        super(MultiHeadAttention, self).__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        assert embed_dim % num_heads == 0
        self.head_dim = embed_dim // num_heads

        self.q_linear = nn.Linear(embed_dim, embed_dim)
        self.k_linear = nn.Linear(embed_dim, embed_dim)
        self.v_linear = nn.Linear(embed_dim, embed_dim)
        self.output_linear = nn.Linear(embed_dim, embed_dim)

    def forward(self, query, key, value, mask=None):
        batch_size = query.shape[0]

        # Linear projections
        query = self.q_linear(query)
        key = self.k_linear(key)
        value = self.v_linear(value)

        # Reshape tensors for multi-heads
        query = query.view(batch_size, -1, self.num_heads, self.head_dim).permute(0, 2, 1, 3)
        key = key.view(batch_size, -1, self.num_heads, self.head_dim).permute(0, 2, 1, 3)
        value = value.view(batch_size, -1, self.num_heads, self.head_dim).permute(0, 2, 1, 3)

        # Compute scaled dot-product attention
        scores = torch.matmul(query, key.permute(0, 1, 3, 2)) / (self.head_dim ** 0.5)
        if mask is not None:
            scores = scores.masked_fill(mask == 0, float("-1e20"))

        attention_weights = F.softmax(scores, dim=-1)
        output = torch.matmul(attention_weights, value)

        # Reshape and concatenate heads
        output = output.permute(0, 2, 1, 3).contiguous().view(batch_size, -1, self.embed_dim)

        # Linear projection for the output
        output = self.output_linear(output)

        return output, attention_weights

class PositionalEncoding(nn.Module):
    def __init__(self, max_len, embed_dim):
        super(PositionalEncoding, self).__init__()
        self.encoding = torch.zeros(max_len, embed_dim)
        position = torch.arange(0, max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, embed_dim, 2) * -(math.log(10000.0) / embed_dim))
        self.encoding[:, 0::2] = torch.sin(position * div_term)
        self.encoding[:, 1::2] = torch.cos(position * div_term)
        self.encoding = self.encoding.unsqueeze(0)

    def forward(self, x):
        return x + self.encoding[:, :x.size(1)].detach()

class FeedForward(nn.Module):
    def __init__(self, embed_dim, hidden_dim):
        super(FeedForward, self).__init__()
        self.linear1 = nn.Linear(embed_dim, hidden_dim)
        self.linear2 = nn.Linear(hidden_dim, embed_dim)

    def forward(self, x):
        x = F.relu(self.linear1(x))
        x = self.linear2(x)
        return x

class TransformerLayer(nn.Module):
    def __init__(self, embed_dim, num_heads, hidden_dim, num_residual_layers):
        super(TransformerLayer, self).__init__()
        self.num_residual_layers = num_residual_layers

        self.layer_norm_input = nn.LayerNorm(embed_dim)
        self.self_attention = MultiHeadAttention(embed_dim, num_heads)
        self.feed_forward = FeedForward(embed_dim, hidden_dim)
        self.layer_norm_output = nn.LayerNorm(embed_dim)

        # Initialize weights of residual layers
        self.init_weights()

    def init_weights(self):
        nn.init.normal_(self.feed_forward.linear1.weight, std=1.0 / math.sqrt(self.num_residual_layers))
        nn.init.normal_(self.feed_forward.linear2.weight, std=1.0 / math.sqrt(self.num_residual_layers))

    def forward(self, x, mask=None):
        # Layer normalization at the input
        x = self.layer_norm_input(x)

        # Multi-head self-attention
        attended, _ = self.self_attention(x, x, x, mask)
        x = x + attended

        # Feed-forward network
        fed_forward = self.feed_forward(x)
        x = x + fed_forward

        # Layer normalization at the output
        x = self.layer_norm_output(x)

        return x

class GPT2small(nn.Module):
    def __init__(self, vocab_size, embed_dim, num_heads, num_layers, hidden_dim):
        super(GPT2small, self).__init__()
        self.token_embeddings = nn.Embedding(vocab_size, embed_dim)
        self.positional_encoding = PositionalEncoding(max_len=1024, embed_dim=embed_dim)
        self.transformer_layers = nn.ModuleList([
            TransformerLayer(embed_dim, num_heads, hidden_dim, num_layers) for _ in range(num_layers)
        ])
        self.output_layer = nn.Linear(embed_dim, vocab_size)

    def forward(self, x, mask=None):
        tokens_embedded = self.token_embeddings(x)
        tokens_embedded_pe = self.positional_encoding(tokens_embedded)

        for layer in self.transformer_layers:
            tokens_embedded_pe = layer(tokens_embedded_pe, mask)

        output = self.output_layer(tokens_embedded_pe)
        return output

    def generate(self, prompt, max_length=100, temperature=1.0, do_sample=True):
        self.eval()
        with torch.no_grad():
            prompt = torch.tensor(prompt).unsqueeze(0)
            for _ in range(max_length):
                output = self.forward(prompt)
                output = output[:, -1, :] / temperature
                probabilities = F.softmax(output, dim=-1)
                if do_sample:
                    next_token = torch.multinomial(probabilities, 1)
                else:
                    _, next_token = torch.max(probabilities, dim=-1)
                prompt = torch.cat([prompt, next_token.unsqueeze(0)], dim=-1)
        return prompt.squeeze(0)

def train(model, tokenizer, dataset, epochs, batch_size, learning_rate):
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

    for epoch in range(epochs):
        running_loss = 0.0
        for i in range(0, len(dataset), batch_size):
            batch = dataset[i:i+batch_size]
            inputs = tokenizer.encode(batch)  # Convert text to tokens
            targets = inputs.clone()  # Shift input to get target

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs.view(-1, outputs.size(-1)), targets.view(-1))
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        print(f"Epoch [{epoch + 1}/{epochs}], Loss: {running_loss / len(dataset)}")

def sample_prediction(model, tokenizer, prompt, max_length=100, temperature=1.0, do_sample=True):
    model.eval()
    generated_text = model.generate(prompt, max_length=max_length, temperature=temperature, do_sample=do_sample)
    decoded_text = tokenizer.decode(generated_text.tolist())
    return decoded_text

import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Instantiate your custom GPT-2small model
# Standard parameters used in GPT-2
vocab_size = 50257
embed_dim = 768
num_heads = 12
num_layers = 12
hidden_dim = 3072
custom_model = GPT2small(vocab_size, embed_dim, num_heads, num_layers, hidden_dim)  # Update with your model parameters

# Load the original GPT-2 125M model from Hugging Face's transformers library
original_model_name = 'gpt2'
original_model = GPT2LMHeadModel.from_pretrained(original_model_name)
original_tokenizer = GPT2Tokenizer.from_pretrained(original_model_name)

pip install tiktoken

import os
import requests
import tiktoken
import numpy as np

# download the tiny shakespeare dataset
input_file_path = os.path.join(os.path.dirname(__file__), 'input.txt')
if not os.path.exists(input_file_path):
    data_url = 'https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt'
    with open(input_file_path, 'w') as f:
        f.write(requests.get(data_url).text)

with open(input_file_path, 'r') as f:
    data = f.read()
n = len(data)
train_data = data[:int(n*0.9)]
val_data = data[int(n*0.9):]

train(custom_model, original_tokenizer, dataset, epochs = 10, batch_size =10, learning_rate = 0.2)



# Set the models to evaluation mode
custom_model.eval()
original_model.eval()

# Sample prompt sequence
prompt_sequence = "In a shocking finding, scientist discovered a herd of unicorns..."

# Tokenize the prompt sequence for your custom model
enc = tiktoken.get_encoding("cl100k_base")  # Replace with your custom tokenizer
tokenized_sequence = enc.encode(prompt_sequence)

# Generate text using your custom GPT-2 small model
generated_sequence_custom_model = custom_model.generate(tokenized_sequence, max_length=100, temperature=0.7)
decoded_text_custom_model = enc.decode(generated_sequence_custom_model[0], skip_special_tokens=True)

# Tokenize the prompt sequence for the original GPT-2 model
inputs_original_model = original_tokenizer.encode(prompt_sequence, return_tensors='pt')

# Generate text using the original GPT-2 model
with torch.no_grad():
    outputs_original_model = original_model.generate(inputs_original_model, max_length=100, temperature=0.7)
    decoded_text_original_model = original_tokenizer.decode(outputs_original_model[0], skip_special_tokens=True)

# Compare the generated text between your custom model and the original model
print("Generated text from custom model:")
print(decoded_text_custom_model)
print("\nGenerated text from original GPT-2 125M model:")
print(decoded_text_original_model)